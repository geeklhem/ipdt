# ipdt : Iterate Prisoner's dilemma tournament

ipdt (_Iterative Prisoner's Dilemma Tournament_) is a simple software
to organize iterative prisoner's dilemma competition between different
strategies.

It has been written for the "[Mathematics and Biology Workgroup](http://www.gt-mathsbio.biologie.ens.fr/)" in the
École normale supérieure (Paris, France).

## How to 
### Just test it
To test it if you have python2.7 and pip installed you can just type:

```Shell
# Global install:
$ sudo pip install -U https://github.com/geeklhem/ipdt/zipball/master 
# Local install (do not need root privileges):
$ pip --user install  -U https://github.com/geeklhem/ipdt/zipball/master
# To uninstall 
$ sudo pip uninstall ipdt
``` 

Then you can run a tournament between all defined strategies:
```Shell
$ ipdt tournament 
``` 

You can restrict the tournament to a subset of strategies:
```Shell
# list all available strategies
$ ipdt list
# A tournament with only two strategies 
$ ipdt tournament --players naivecoop defector randomplayer
``` 

You can also run a single match between two strategies:
```Shell
$ ipdt match -p naivecoop randomplayer
```

If you want more detailed info on the output, you can use the options
(from the more to the less detailed output) `-v`: warnings (default),
`-vv` info or `-vvv` debug.

### Write a strategy
#### Get the code 
In order to write a strategy, you should install the module in
"develop mode", this way the modification you do in the code will be
immediately available. 

```Shell
# Download it 
$ git clone https://github.com/geeklhem/ipdt/ #using git (useful if you want to submit your code)  
$ wget https://github.com/geeklhem/ipdt/archive/master.zip; unzip master.zip ; mv ipdt-master ipdt  #without git
# install it
$ cd ipdt 
$ python setup.py develop
``` 
#### Create your module

In ipdt, each strategies is stored as a python module (`codename.py`)
in the `players/` folder. Several strategies are bundled with the
code, it is a good idea to go and check them.

A strategy module to be valid must:
- Have a different name than the other modules.
- Contain a Player object inheriting from ipdt.player.Player 
- This object must have a method `play(self,last_move)` that take the
  opponent last move (as a boolean, `True` for cooperation, `False` for
  defection and `None` in the first round) and return a boolean for your
  move (same convention)

You can:
- Write an `__init__(self,param)` function, that will be ran before
  the beginning of the match, to set up some attributes and reads the
  dictionary `param` containing the match parameters (`param["T"]`
  contains the number of successive rounds,
  `param["cd"],param["cc"],param["dc"],param["dd"],` contains the
  payoff matrix (the first character is the move: `c` or `d` of the
  focal player). 
- Define the Player.name and Player.author class variable to
  characterize your strategy

#### Submit a strategy 

You can either do a [github pull
request](https://guides.github.com/introduction/flow/index.html) or
send us your module (the *.py file) at gt-mathsbio.contact<AT>lists.ens.fr. 

## License

This program is distributed under the term of the GNU General Public
License v3 (or later) with ABSOLUTELY NO WARRANTY. This is free
software, and you are welcome to redistribute it. 

