#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""ipdt - Copyright 2014 Guilhem Doulcier.

ipdt (Iterated Prisoner's Dilemma Tournament) is a simple software to
organise iterative prisoner's dilemma competition between strategies.

This program is distributed under the term of the GNU General Public
License v3 (or later) with ABSOLUTELY NO WARRANTY. This is free
software, and you are welcome to redistribute it.
"""

import logging
import os
import argparse

# Argparse config 
parser = argparse.ArgumentParser(description=__doc__,formatter_class=argparse.RawDescriptionHelpFormatter,)
parser.add_argument('command',
                    help='Command',
                    type=str,
                    choices=['tournament', 'list', 'match', 'popdyn'])
parser.add_argument('-p','--players',
                    nargs="*",
                    default=[],
                    help="Strategies to use codenames")
parser.add_argument('-e','--exclude',
                    nargs="*",
                    default=[],
                    help="Strategies to exclude codenames")
parser.add_argument('-v','--verbose',
                    help='Verbosity level : -v warning, -vv info, -vvv debug',
                    action="count",
                    default=0)
parser.add_argument('-T','--turns',
                    type=int,
                    help='Number of turns',
                    default=100)
parser.add_argument('--mu',
                    type=float,
                    help='Mutation level (used only if command is popdyn).',
                    default=0)

parser.add_argument('-g','--generations',
                    type=int,
                    help='Number of generations (used only if command is popdyn).',
                    default=100)
parser.add_argument('--replicas',
                    type=int,
                    help='Number of repetition of the tournament',
                    default=1)
parser.add_argument('--html',
                    help='Ask for HTML export of the results (tournament only).',
                    type=str)
parser.add_argument('-m','--payoff_matrix',
                    type=float,
                    help='Payoff matrix CC,CD,DC,DD',
                    nargs=4,
                    default=(1,-1,2,0))


args = parser.parse_args()

# Logging config
log_levels = [logging.ERROR,logging.WARNING,logging.INFO,logging.DEBUG]

logging.addLevelName( logging.WARNING, "\033[1;31m%s\033[1;0m" % logging.getLevelName(logging.WARNING))
logging.addLevelName( logging.ERROR, "\033[1;41m%s\033[1;0m" % logging.getLevelName(logging.ERROR))
logging.addLevelName( logging.CRITICAL, "\033[1;41m%s\033[1;0m" % logging.getLevelName(logging.CRITICAL))
logging.addLevelName( logging.INFO, "\033[1;42m%s\033[1;0m" % logging.getLevelName(logging.INFO))
logging.addLevelName( logging.DEBUG, "\033[1;43m%s\033[1;0m" % logging.getLevelName(logging.DEBUG))
# logging.getLogger().addFilter(logging.Filter("ipdt"))

logger = logging.getLogger('ipdt')

logger.setLevel(log_levels[args.verbose])
ch = logging.StreamHandler()
ch.setLevel(log_levels[args.verbose])
ch.setFormatter(logging.Formatter('%(levelname)s:%(name)s: %(message)s'))
logger.addHandler(ch)


# Imports 
import ipdt.tournament
import ipdt.players
import ipdt.export
import ipdt.popdyn

# === SET THE PARAMETERS ===
param = {}
param["T"] = args.turns
param["replicas"] = args.replicas
param["generations"] = args.generations
param["mu"] = args.mu

# Payoff matrix 
order = ["cc","cd","dc","dd"]
for move,po in zip(order,args.payoff_matrix):
    param[move] = po

# If there is no players defined, take all possible strategies.
if len(args.players) == 0:
    args.players = ipdt.players.__all__
# If they are exluded strategies, remove them.
if len(args.exclude) != 0:
    args.players = list(set(args.players) - set(args.exclude))

players = [ getattr(ipdt.players, name).Player for name in args.players]
if args.html:
    info = {}
    for code,P in zip(args.players,players):
        info[P.name] = {"author":P.author,
                        "name":P.name,
                        "code":code,
                        "description":P.__doc__}
    

if args.command == "match":   
    payoff = ipdt.tournament.match(players[0],players[1],param)
    if payoff[0]>payoff[1]:
        winner = players[0].name
    elif payoff[0]==payoff[1]:
        winner = "NOBODY"
    else:
        winner = players[1].name
    print("{} vs {}: {} WINS !".format(players[0].name,players[1].name,winner))
    logger.info("Payoffs: {}".format(payoff))

if args.command == "tournament":
    ranking,details = ipdt.tournament.tournament(players,param)
    print("Tournament ended ! Ranking:")
    for n,(score,name) in enumerate(ranking):
        print("{}: {} ({} points)".format(n+1,name,score))

    if args.html:
        exporter = ipdt.export.HTMLexporter(args.html+".html",
                                            ranking,
                                            details,
                                            param,
                                            info)
        exporter.save()

if args.command == "popdyn":
    time_series, details = ipdt.popdyn.popdyn(players,param)

    if args.html:
        exporter = ipdt.export.HTMLexporterTS(args.html+".html",
                                              time_series,
                                              details,
                                              param,
                                              info)
        exporter.save()    

if args.command == "list":
    print("Available strategies are:")
    print("{:20} {:20} {}".format("Code","Author","Name"))
    print("-"*20+"+"+"-"*20+"+"+"-"*30)
    available = ["{1:20} {2:20} {0}".format(getattr(ipdt.players, code).Player.name,
                                     code,
                                     getattr(ipdt.players, code).Player.author)
               for code in args.players]
    print "\n".join(available)
